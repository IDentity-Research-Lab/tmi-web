<%- title "#{@context_name} Themes" %>

<h1><%= pluralize(@themes.count, "Theme") %> for "<%= @context_name %>".</h1>

<h2>Theme:</h2>
<div class="tag-collection">
  <% @themes.sort_by(&:name).each do |theme| %>
    <a onclick="filterBy('<%= theme.id %>');">
	    <div class="tag theme" id="theme-<%= theme.id %>" data-theme="<%= theme.id %>" data-categories="<%= theme.categories.map(&:id) %>">
        <%= theme.name %>
      </div>
    </a>
	  <%= render partial: 'form', locals: { theme: theme } %>
  <% end %>
  <br style="clear: both;" />
</div>
<div class="tag-form-controls" id="new-theme-form">
  <%= form_with model: Theme.new, data: { turbo_frame: "tag-collection" } do |f| %>
	  <%= f.text_field :name %>
	  <%= f.hidden_field :context, value: @context %>
	  <%= f.submit "Add Theme" %>
  <% end %>
</div>

<h2>Selected categories:</h2>

<div class="tag-collection">
  <% @categories.sort_by(&:name).each do |category| %>
    <a onclick="filterBy('<%= category.id %>'); updateAssociatedCategories(); return false">
      <div class="tag category zoom-link-light" id="category-<%= category.id %>" data-category="<%= category.id %>">
        <%= category.name %>
      </div>
    </a>
  <% end %>
</div>
<br style="clear: both;" />

<h2>Related codes:</h2>
<div class="tag-collection">
  <% @codes.sort_by(&:name).each do |code| %>
    <div class="tag codes" data-categories="<%= code.categories.map(&:id) %>"><%= code.name %></div>
  <% end %>
</div>

<%= render partial: "/shared/filtering" %>

<script language="javascript">

  function toggleThemeForm(themeID) {
    const themeElement = document.getElementById('theme-' + themeID);
    const newThemeFormElement = document.getElementById('new-theme-form');
    const themeForm = document.getElementById('form-theme-' + themeID);

    if (Array.from(themeElement.classList).includes('active')) {
      newThemeFormElement.classList.add('hidden');
      themeForm.classList.remove('hidden');
    } else {
      newThemeFormElement.classList.remove('hidden');
      themeForm.classList.add('hidden');
    }
  }

  function showNewThemeForm() {
    const themeFormElement = document.getElementById('new-theme-form');
    themeFormElement.classList.remove('hidden');
  }

  function updateAssociatedCategories() {
    const activeTheme = document.querySelectorAll(".theme.active")[0];
    const activeThemeID = activeTheme.getAttribute('data-theme');
    if (activeTheme != null) {
      const activeCategories = Array.from(document.querySelectorAll(".category.active"));
      categoryIDs = activeCategories.map((element) => element.getAttribute('data-category'));
      document.getElementById("field-categories-" + activeThemeID).value = categoryIDs;
      activeTheme.dataset.categories = JSON.stringify(categoryIDs);
      submitButton = document.getElementById("button-theme-" + activeTheme.getAttribute('data-theme'));
      submitButton.click();
    }
  }

</script>
